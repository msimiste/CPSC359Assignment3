imul1	MAR = SP - 1; rd						// Increment SP and copy to MAR
imul2	MAR	= SP = SP + 1; wr
							//MDR = TOS; wr
imul3	MAR = SP - 1; rd						// Increment SP and copy to MAR
imul4	MAR	= SP = SP + 1
imul5	TOS = MDR; wr
		
imul6	MAR = SP = SP - 1; rd					// Read in next-to-top word on stack
imul7	H = TOS									// H = top of stack
imul8	MDR = TOS = MDR - H; wr;				// Do subtraction; write to top of stack		

imul9	MAR = SP = SP - 1; rd					// Read in next-to-top word on stack
imul10	OPC = TOS								// Save TOS in OPC temporarily
imul11	TOS = MDR								// Put new top of stack in TOS
imul12	N = OPC; if (N) goto imul13; else goto imul19	// Branch on N bit

//y<x, need to swap
imul13	MAR = SP - 1; rd						// Set MAR to SP - 1; read 2nd word from stack
imul14	MAR = SP								// Set MAR to top word
imul15	H = MDR; wr								// Save TOS in H; write 2nd word to top of stack
imul16	MDR = TOS								// Copy old TOS to MDR
imul17	MAR = SP - 1; wr						// Set MAR to SP - 1; write as 2nd word on stack
imul18	TOS = H 								// Update TOS


//initalize total = 0
imul19		MAR = SP = SP + 1									//pointing at total
imul21		TOS = MDR = 0; wr
		
imul22		MAR = SP - 1; rd;									//get min value from memory
imul23		OPC = MDR; 											// save min operand to OPC
//imul20	N = OPC; if (N) goto myT1; else goto myF1			// if neg quit
imul24		Z = OPC; if (Z) goto imul30; else goto imul31 			// if zero quit
imul25		MAR = SP - 2; rd; 									// get max value
imul26		H = TOS												// H = top of stack
imul27		MAR = SP
imul28		MDR = TOS = MDR + H; wr								// Add top two words; write to top of stack

imul29		OPC = OPC - 1; goto imul24 							// dec OPC and repeat
		
		
		
//myT1    	goto Main1
imul30    	goto Main1
//myF1    	goto mdup4
imul31 		goto imul25
		
		

